import React from "react";

export const PDTemplate1 = ({ events, ads, currentTime, isPortrait }) => {
  return (
    <div
      className={`min-h-screen p-8 ${isPortrait ? "portrait" : "landscape"}`}
    >
      <div className="mb-4 text-2xl font-bold text-right">{currentTime}</div>

      {/* Eventos */}
      {events.length > 0 ? (
        <div className="space-y-4">
          <h2 className="text-3xl font-bold mb-6">Eventos Actuales</h2>
          {events.map((event) => (
            <div key={event.id} className="p-4 bg-white rounded-lg shadow-md">
              <h3 className="text-xl font-semibold">{event.nombreEvento}</h3>
              <p className="text-gray-600">Salón: {event.salon}</p>
              <p className="text-gray-600">
                Horario: {event.horaInicialSalon} - {event.horaFinalSalon}
              </p>
            </div>
          ))}
        </div>
      ) : ads.length > 0 ? (
        <div className="space-y-4">
          <h2 className="text-3xl font-bold mb-6">Anuncios</h2>
          {ads.map((ad) => (
            <div key={ad.id} className="p-4 bg-white rounded-lg shadow-md">
              <h3 className="text-xl font-semibold">{ad.titulo}</h3>
              <p className="text-gray-600">{ad.descripcion}</p>
            </div>
          ))}
        </div>
      ) : (
        <div className="flex justify-center items-center h-[60vh]">
          <p className="text-2xl text-gray-500">
            No hay eventos o anuncios disponibles
          </p>
        </div>
      )}
    </div>
  );
};


Aca esta el templa de directorio anterior:
<section className="relative inset-0 w-full min-h-screen md:fixed sm:fixed min-[120px]:fixed bg-white">
<div
  className="  "
  style={{
    transform: templateData[0]?.setPortrait
      ? "rotate(90deg)"
      : "rotate(0deg)  ",
    maxWidth: templateData[0]?.setPortrait ? "100vh" : "", // Establecer el ancho máximo para ajustarse a la pantalla
    height: templateData[0]?.setPortrait ? "100vh" : "", // Ajustar la altura según la orientación
    width: templateData[0]?.setPortrait ? "100%" : "", // Asegurar que el ancho se ajuste correctamente
    marginLeft: templateData[0]?.setPortrait ? "auto" : "",
    marginRight: templateData[0]?.setPortrait ? "0px" : "",
  }}
>
  <div id="Content" className=" ">
    {/* Header */}
    <div className="flex items-center justify-between ">
      {/* Logo en la esquina superior izquierda */}
      {templateActual.logo && (
        <>
          <div className="ml-5" style={{ height: "100%" }}>
            <img
              src={templateActual.logo}
              alt="Logo"
              className="rounded-lg object-contain w-full h-full  "
              style={{
                width: windowSize.width / 8.6, // Dividir por 5 o cualquier otro factor para ajustar el tamaño
                height: windowSize.height / 8.6, // Dividir por 10 o cualquier otro factor para ajustar el tamaño
              }}
            />
          </div>
        </>
      )}
      {/* ---- Titulo Eventos del dia y Fecha---- */}
      <div
        className="flex flex-col text-color items-center"
        style={{
          fontFamily: templateActual.fontStyle,
        }}
      >
        <>
          <h1
            className={`text-2xl font-bold  text-center mb-2 block ${
              templateActual.idioma === "es" ? "block" : "hidden"
            }`}
          >
            Eventos del día
          </h1>

          <h1
            className={`text-2xl font-bold text-center mb-2 block ${
              templateActual.idioma === "en" ? "block" : "hidden"
            }`}
          >
            Today&apos;s Events
          </h1>

          <div
            className={` text-center mb-2  ${
              templateActual.idioma === "es-en" ? "block" : "hidden"
            }`}
          >
            <p className="text-2xl font-bold">Eventos del día</p>
            <p className="text-xl font-bold">Today&apos;s Events</p>
          </div>
          <p
            className={`text-base text-center mb-2 ${
              templateActual.idioma === "es" ? "block" : "hidden"
            }`}
          >
            {obtenerFecha("es")}
          </p>
          <p
            className={`text-base text-center mb-2 ${
              templateActual.idioma === "en" ? "block" : "hidden"
            }`}
          >
            {obtenerFecha("en")}
          </p>
          <p
            className={`text-base text-center mb-2 ${
              templateActual.idioma === "es-en" ? "block" : "hidden"
            }`}
          >
            <p className="text-xl ">{obtenerFecha("es")}</p>
            <p> {obtenerFecha("en")}</p>
          </p>
        </>
      </div>

      {/* ---- Clima e Icono ---- */}
      <div
        className="flex-col text-color "
        style={{
          fontFamily: templateActual.fontStyle,
        }}
      >
        <div>
          {isLoading ? (
            <p>
              {/* Cargando datos del clima... */}
              {templateActual.idioma === "en" &&
                "Loading weather data..."}
              {templateActual.idioma === "es" &&
                "Cargando datos del clima..."}
              {templateActual.idioma === "es-en" &&
                "Cargando datos del clima... / Loading weather data..."}
            </p>
          ) : weatherData &&
            weatherData.current &&
            weatherData.current.temp_c ? (
            <div className="grid grid-cols-2 items-center ">
              <img src={weatherData.current.condition.icon} alt="Clima" />
              <p className="text-2xl font-bold -ml-4 w-24">
                {weatherData.current.temp_c} °C
              </p>
              <div className="flex justify-center col-span-2">
                <p className="text-2xl font-bold ">{currentHour}</p>
              </div>
            </div>
          ) : (
            //si no da el Clima muestra un mensaje de Bienvenida
            <h2 className="text-4xl mr-16">
              {/* Bienvenido */}
              {templateActual.idioma === "en" && "Welcome"}
              {templateActual.idioma === "es" && "Bienvenido"}
              {templateActual.idioma === "es-en" &&
                "Bienvenido / Welcome"}
            </h2>
          )}
        </div>
      </div>
    </div>
    {/* Contenedor de eventos */}
    {!templateData[0]?.setPortrait ? (
      <div className="grid grid-cols-4 bg-white">
        {/* normal */}
        <div className="col-span-3 md:col-span-3  mx-3">
          {/* Linea arriba */}{" "}
          <div
            className={` text-black  uppercase  font-bold px-20 rounded-t-xl h-6`}
            style={{
              background: `linear-gradient(to bottom, ${templateActual.templateColor} 70%, #e3e3e3d9)`, // Ajusta el punto de inicio del degradado
              color: templateActual.fontColor,
              fontFamily: templateActual.fontStyle,
            }}
          >
            {/* Título */}
            <h2 className=" text-xl text-center">
              {/* EVENTOS */}
              {templateActual.idioma === "en" && "EVENTS"}
              {templateActual.idioma === "es" && "EVENTOS"}
              {templateActual.idioma === "es-en" && "EVENTOS / EVENTS"}
            </h2>
          </div>
          {/* contenido principal */}
          <div
            className=" bg-gradient-to-t from-white to-gray-200  relative z-20"
            style={{}}
          >
            <div className="flex flex-col text-black">
              <div className=" pl-5 flex-grow">
                {/* Parte con slider horizontal  ------------------------------------------------------------------ */}
                <div
                  className=""
                  style={{
                    display:
                      (templateData[0]?.setPortrait &&
                        eventosEnCurso.length < 6) ||
                      (!templateData[0]?.setPortrait &&
                        eventosEnCurso.length < 6)
                        ? "none"
                        : "",
                  }}
                >
                  <div ref={sliderRef} className="keen-slider">
                    {eventosPorSlide.map((slideEventos, index) => (
                      <div key={index} className="keen-slider__slide ">
                        {Array.from({
                          length: templateData[0]?.setPortrait ? 6 : 5,
                        }).map((_, innerIndex) => {
                          const evento = slideEventos[innerIndex]; // Obtener el evento si existe

                          return (
                            <div
                              key={innerIndex}
                              className="flex items-center space-x-4 space-y-1 border-b pr-8"
                              style={{
                                height: evento ? "auto" : "92px",
                                borderColor: templateActual.templateColor,
                              }} // Establecer la altura dependiendo de si hay evento o no
                            >
                              {/* ---- Evento ---- */}
                              {evento ? (
                                // Si hay evento, mostrar los detalles
                                <>
                                  <div className="my-auto flex justify-center items-center relative overflow-hidden w-[7vw] h-[7vw]">
                                    <img
                                      style={{
                                        objectFit: "cover",
                                      }}
                                      src={evento.images[0]}
                                      alt={evento.nombreEvento}
                                    />
                                  </div>

                                  <div className="w-full ">
                                    <h3 className="font-bold mb-4 text-lg">
                                      {evento.nombreEvento}
                                    </h3>
                                    <div className="grid grid-cols-3 gap-1 font-bold text-2xl ">
                                      {/* Columna 1: Nombre (a la izquierda) */}
                                      <p className="col-span-3 text-sm">
                                        {evento.tipoEvento}
                                      </p>
                                      <p className="text-sm ">
                                        {evento.devices[0]}
                                      </p>
                                      {/* Columna 2: Lugar (en el centro) */}
                                      <p className="text-center text-sm ">
                                        {evento.lugar}
                                      </p>

                                      {/* Columna 3: Rango de horas (a la derecha) */}
                                      <p className=" text-right text-sm ">
                                        {evento.horaInicialReal + " a "}
                                        {evento.horaFinalReal}
                                        {"HRS"}
                                      </p>
                                    </div>
                                  </div>
                                </>
                              ) : (
                                // Si no hay evento, mostrar el mensaje de casillero vacío
                                <p></p>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    ))}
                  </div>
                </div>
                {/* Parte sin slider horizontal ------------------------------------------------------------------ */}
                <div
                  className=""
                  style={{
                    display:
                      (templateData[0]?.setPortrait &&
                        eventosEnCurso.length > 6) ||
                      (!templateData[0]?.setPortrait &&
                        eventosEnCurso.length > 5)
                        ? "none"
                        : "",
                  }}
                >
                  {eventosPorSlide.map((slideEventos, index) => (
                    <div key={index}>
                      {Array.from({
                        length: templateData[0]?.setPortrait ? 6 : 5,
                      }).map((_, innerIndex) => {
                        const evento = slideEventos[innerIndex]; // Obtener el evento si existe

                        return (
                          <div
                            key={innerIndex}
                            className="flex items-center space-x-4 space-y-1 border-b pr-8"
                            style={{
                              height: evento ? "auto" : "92px",
                              borderColor: templateActual.templateColor,
                            }} // Establecer la altura dependiendo de si hay evento o no
                          >
                            {/* ---- Evento ---- */}
                            {evento ? (
                              // Si hay evento, mostrar los detalles
                              <>
                                <div className="my-auto flex justify-center items-center relative overflow-hidden w-[6vw] h-[6vw]">
                                  <img
                                    className="object-cover"
                                    src={evento.images[0]}
                                    alt={evento.nombreEvento}
                                  />
                                </div>

                                <div className="w-full ">
                                  <h3 className="font-bold mb-4 text-lg">
                                    {evento.nombreEvento}
                                  </h3>
                                  <div className="grid grid-cols-3 gap-1 font-bold text-2xl ">
                                    {/* Columna 1: Nombre (a la izquierda) */}
                                    <p className="col-span-3 text-sm">
                                      {evento.tipoEvento}
                                    </p>
                                    <p className="text-sm ">
                                      {evento.devices[0]}
                                    </p>
                                    {/* Columna 2: Lugar (en el centro) */}
                                    <p className="text-center text-sm ">
                                      {evento.lugar}
                                    </p>

                                    {/* Columna 3: Rango de horas (a la derecha) */}
                                    <p className=" text-right text-sm ">
                                      {evento.horaInicialReal + " a "}
                                      {evento.horaFinalReal}
                                      {"HRS"}
                                    </p>
                                  </div>
                                </div>
                              </>
                            ) : (
                              // Si no hay evento, mostrar el mensaje de casillero vacío
                              <p></p>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
          {/* Linea abajo */}
          <div
            className={`text-white uppercase font-bold px-20 rounded-b-xl h-6 flex justify-center items-end`}
            style={{
              background: `linear-gradient(to top, ${templateActual.templateColor} 70%, #e3e3e3d9)`, // Ajusta el punto de inicio del degradado

              fontFamily: templateActual.fontStyle,
            }}
          >
            {/* Título */}
            <h2
              className="text-color text-xl text-center align-bottom "
              style={{ color: templateActual.fontColor }}
            >
              {/* NOTICIAS */}
              {templateActual.idioma === "en" && "NEWS"}
              {templateActual.idioma === "es" && "NOTICIAS"}
              {templateActual.idioma === "es-en" && "NOTICIAS / NEWS"}
            </h2>
          </div>
        </div>
        <div className="col-span-1 md:col-span-1 flex items-center justify-center  mx-3">
          <div
            style={{
              height: "100%",
              borderRadius: "10px", // Redondear las esquinas
            }}
          >
            <img
              style={{
                width: windowSize.width / 4, // Dividir por 5 o cualquier otro factor para ajustar el tamaño
                height: windowSize.height / 1.48, // Dividir por 10 o cualquier otro factor para ajustar el tamaño
                borderRadius: "10px", // Redondear las esquinas objectFit: "cover",
              }}
              src={templateData[0].publicidad}
              alt="Publicidad"
            />
          </div>
        </div>
      </div>
    ) : (
      <div className="">
        {/* 90 grados */}
        {/* Linea arriba */}{" "}
        <div
          className={` text-black  uppercase  font-bold px-20 rounded-t-xl h-8`}
          style={{
            // backgroundColor: templateActual.templateColor,
            background: `linear-gradient(to bottom, ${templateActual.templateColor} 70%, #e3e3e3d9)`,
            color: templateActual.fontColor,
            fontFamily: templateActual.fontStyle,
          }}
        >
          {/* Título */}
          <h2 className=" text-2xl text-center">
            {/* EVENTOS */}
            {templateActual.idioma === "en" && "EVENTS"}
            {templateActual.idioma === "es" && "EVENTOS"}
            {templateActual.idioma === "es-en" && "EVENTOS / EVENTS"}
          </h2>
        </div>
        {/* contenido principal */}
        <div className=" bg-gradient-to-t from-white to-gray-200  relative z-20 ">
          <div className=" text-black">
            {/* Imagen a la izquierda */}
            <div
              className="flex flex-col
        "
            >
              <div className="">
                <div className="space-y-5 pl-5 flex-grow">
                  {/* Slots predeterminados */}
                  <div className="">
                    {/* Parte con slider Vertical ------------------------------------------------------------------ */}

                    <div
                      className=""
                      style={{
                        display:
                          (templateData[0]?.setPortrait &&
                            eventosEnCurso.length < 6) ||
                          (!templateData[0]?.setPortrait &&
                            eventosEnCurso.length < 5)
                            ? "none"
                            : "",
                      }}
                    >
                      <div ref={sliderRef} className="keen-slider">
                        {eventosPorSlide.map((slideEventos, index) => (
                          <div
                            key={index}
                            className="keen-slider__slide my-2"
                          >
                            {Array.from({
                              length: templateData[0]?.setPortrait
                                ? 5
                                : 4,
                            }).map((_, innerIndex) => {
                              const evento = slideEventos[innerIndex]; // Obtener el evento si existe

                              return (
                                <div
                                  key={innerIndex}
                                  className="flex items-center space-x-4 space-y-5 border-b pr-16"
                                  style={{
                                    height: evento ? "111px" : "110px",
                                    borderColor:
                                      templateActual.templateColor,
                                    fontFamily: templateActual.fontStyle,
                                  }} // Establecer la altura dependiendo de si hay evento o no
                                >
                                  {/* ---- Evento ---- */}
                                  {evento ? (
                                    // Si hay evento, mostrar los detalles
                                    <>
                                      <div className="my-auto flex justify-center items-center relative overflow-hidden w-[6vw] h-[6vw]">
                                        <img
                                          className="object-cover"
                                          src={evento.images[0]}
                                          alt={evento.nombreEvento}
                                        />
                                      </div>
                                      <div className="w-full ">
                                        <h3 className="font-bold mb-4 text-xl">
                                          {evento.nombreEvento}
                                        </h3>
                                        <div className="grid grid-cols-3 gap-1 font-bold text-2xl ">
                                          {/* Columna 1: Nombre (a la izquierda) */}
                                          <p className="col-span-3 text-base">
                                            {evento.tipoEvento}
                                          </p>
                                          <p className=" text-base">
                                            {evento.devices[0]}
                                          </p>
                                          {/* Columna 2: Lugar (en el centro) */}
                                          <p className="text-center text-base ">
                                            {evento.lugar}
                                          </p>

                                          {/* Columna 3: Rango de horas (a la derecha) */}
                                          <p className=" text-right text-lg ">
                                            {evento.horaInicialReal +
                                              " a "}
                                            {evento.horaFinalReal}
                                            {"HRS"}
                                          </p>
                                        </div>
                                      </div>
                                    </>
                                  ) : (
                                    // Si no hay evento, mostrar el mensaje de casillero vacío
                                    <p></p>
                                  )}
                                </div>
                              );
                            })}
                          </div>
                        ))}
                      </div>
                    </div>
                    {/* Parte sin slider Vertical ------------------------------------------------------------------*/}
                    <div
                      className=""
                      style={{
                        display:
                          (templateData[0]?.setPortrait &&
                            eventosEnCurso.length > 5) ||
                          (!templateData[0]?.setPortrait &&
                            eventosEnCurso.length > 4)
                            ? "none"
                            : "",
                      }}
                    >
                      {eventosPorSlide.map((slideEventos, index) => (
                        <div key={index} className=" ">
                          {Array.from({
                            length: templateData[0]?.setPortrait ? 5 : 5,
                          }).map((_, innerIndex) => {
                            const evento = slideEventos[innerIndex]; // Obtener el evento si existe

                            return (
                              <div
                                key={innerIndex}
                                className="flex items-center space-x-4 space-y-1 border-b pr-16"
                                style={{
                                  height: evento ? "134px" : "134px",
                                  borderColor:
                                    templateActual.templateColor,
                                  fontFamily: templateActual.fontStyle,
                                }} // Establecer la altura dependiendo de si hay evento o no
                              >
                                {/* ---- Evento ---- */}
                                {evento ? (
                                  // Si hay evento, mostrar los detalles
                                  <>
                                    <div className="my-auto flex justify-center items-center relative overflow-hidden w-[6vw] h-[6vw]">
                                      <img
                                        className="object-cover"
                                        src={evento.images[0]}
                                        alt={evento.nombreEvento}
                                      />
                                    </div>

                                    <div className="w-full ">
                                      <h3 className="font-bold mb-4 text-xl">
                                        {evento.nombreEvento}
                                      </h3>
                                      <div className="grid grid-cols-3 gap-1 font-bold text-2xl ">
                                        {/* Columna 1: Nombre (a la izquierda) */}
                                        <p className="col-span-3 text-base">
                                          {evento.tipoEvento}
                                        </p>
                                        <p className=" text-base">
                                          {evento.devices[0]}
                                        </p>
                                        {/* Columna 2: Lugar (en el centro) */}
                                        <p className="text-center text-base ">
                                          {evento.lugar}
                                        </p>

                                        {/* Columna 3: Rango de horas (a la derecha) */}
                                        <p className=" text-right text-lg ">
                                          {evento.horaInicialReal + " a "}
                                          {evento.horaFinalReal}
                                          {"HRS"}
                                        </p>
                                      </div>
                                    </div>
                                  </>
                                ) : (
                                  // Si no hay evento, mostrar el mensaje de casillero vacío
                                  <p></p>
                                )}
                              </div>
                            );
                          })}
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        {/* Linea abajo */}
        <div
          className={`text-white uppercase font-bold px-20 rounded-b-xl h-8 flex justify-center items-end`}
          style={{
            // backgroundColor: templateActual.templateColor,
            background: `linear-gradient(to top, ${templateActual.templateColor} 70%, #e3e3e3d9)`,
            color: templateActual.fontColor,
            fontFamily: templateActual.fontStyle,
          }}
        >
          {/* Título */}
          <h2
            className="text-color text-2xl text-center align-bottom"
            style={{
              color: templateActual.fontColor,
            }}
          >
            {/* NOTICIAS */}
            {templateActual.idioma === "en" && "NEWS"}
            {templateActual.idioma === "es" && "NOTICIAS"}
            {templateActual.idioma === "es-en" && "NOTICIAS / NEWS"}
          </h2>
        </div>
      </div>
    )}
    {/* texto de abajo */}
    <div className=" bg-white">
      <div className="flex justify-between text-color items-center">
        {/* --- RSS --- */}
        <div className="w-9/12 ">
          <div className="flex ml-3  items-center my-3 font-black bg-gradient-to-r from-gray-300 to-white w-full rounded-md">
            <SliderRSS />
          </div>
          {/* {rssItems.map((item, index) => (
          <div className="my-3 font-black" key={index}>
            <Textra
              effect="topDown"
              duration={1000}
              stopDuration={4000}
              data={[rssItems[index].title]}
            />
          </div>
        ))} */}
        </div>
        {/* --- QR image --- */}
        <div className="flex flex-col items-center mx-2  mb-7">
          <p className=" text-center">
            {/* Eventos en tu dispositivo */}
            {templateActual.idioma === "en" && "Events QR"}
            {templateActual.idioma === "es" && "QR de Eventos"}
            {templateActual.idioma === "es-en" &&
              "QR de Eventos / Events QR"}
          </p>
          {qrCodeUrl && (
            <a
              href={qrCodeUrl}
              target="_blank"
              rel="noopener noreferrer"
              style={{ cursor: "pointer" }}
            >
              {/* Muestra el código QR */}
              <QRCode value={qrCodeUrl} size={70} />
            </a>
          )}
        </div>
      </div>
      <div
        className={`col-span-3 md:col-span-1 flex items-center justify-center mx-3 ${
          !templateData[0]?.setPortrait ? "hidden" : ""
        }`}
      >
        <div
          style={{
            position: "relative",
            overflow: "hidden",
            width: "100%", // Ajusta el ancho del contenedor según sea necesario
            height: "22vw", // Ajusta el alto del contenedor según sea necesario
            borderRadius: "10px", // Redondear las esquinas
          }}
        >
          <img
            style={{
              width: "100%",
              height: "27vw",
              objectFit: "cover",
            }}
            src={templateData[0]?.publicidad}
          />
        </div>
      </div>
    </div>
  </div>
</div>
</section>